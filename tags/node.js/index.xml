<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>node.js on 细雨听风</title>
    <link>https://jxlnssyly.github.io/tags/node.js/</link>
    <description>Recent content in node.js on 细雨听风</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-ch</language>
    <lastBuildDate>Sun, 17 Nov 2019 21:17:41 +0800</lastBuildDate>
    
	<atom:link href="https://jxlnssyly.github.io/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>12、JWT简介</title>
      <link>https://jxlnssyly.github.io/12jwt/</link>
      <pubDate>Sun, 17 Nov 2019 21:17:41 +0800</pubDate>
      
      <guid>https://jxlnssyly.github.io/12jwt/</guid>
      <description>什么是JWT？  JSON Web Token 是一个开放标准(RFC 7519) 定义了一种紧凑且独立的方式，可以将各方之间的信息作为JSON对象进行安全传输 该信息可以验证和信任，因为是经过数字签名的  JWT的构成  头部(Header)
typ: Token的类型，这里固定为JWT alg: 使用的hash算法，例如：HMAC SHA256或者RSA  有效载荷(Payload)
1、存储需要传递的信息，如用户ID、用户名等 2、还包含元数据、如过期时间、发布人等 3、与Header不同，playload可以加密  签名(Signature)
1、对Header和Payload部分进行签名 2、保证Token在传输的过程中没有被篡改或者损坏   JWT的工作原理 1、浏览器端通过POST /authenticate请求，将username和password发给服务端
2、服务端验证username和password通过之后，将用户ID等信息作为JWT的有效载荷(Payload)与头部(Header)进行base64编码之后形成一个JWT，返回给浏览器端
3、前端将JWT保存在localstorage中
4、前端在每次请求的时候，将&amp;rdquo;Bearer &amp;hellip;JWT&amp;hellip;&amp;ldquo;作为HTTP Header Authorization
5、后端检查JWT是否存在，然后验证JWT的有效性，签名是否正确，令牌是否过期，验证通过之后，使用有效载荷里面的用户信息，进行其他的业务逻辑，然后返回结果
6、退出登录的时候就将JWT从localstorage中删除</description>
    </item>
    
    <item>
      <title>11、koa与nosql</title>
      <link>https://jxlnssyly.github.io/11koa%E4%B8%8Enosql/</link>
      <pubDate>Sat, 16 Nov 2019 14:54:05 +0800</pubDate>
      
      <guid>https://jxlnssyly.github.io/11koa%E4%B8%8Enosql/</guid>
      <description>NoSQL简介 什么是NoSQL  对于不同于传统的关系型数据库的数据库管理系统的统称  NoSQL数据库的分类  列存储(HBase) 文档存储(MongoDB) Key-Value存储(Redis) 图存储(FlockDB) 对象存储(db4o) XML存储(BaseX)  为什么要用NoSQL  简单(没有原子性、一致性、隔离性等复杂规范) 便于横向拓展 适合超大规模数据的存储 很灵活地存储复杂结构的数据(Schema Free)  MongoDB 什么是MongoDB？  来自于英文单词&amp;rdquo;Humongous&amp;rdquo;，中文含义为&amp;rdquo;庞大&amp;rdquo; 面向文档存储的开源数据库 由C++编写  为什么要用MongoDB  性能好(内存计算) 大规模数据存储(可拓展性) 可靠安全(本地复制、自动故障转移) 方便存储复杂数据结构(Schema Free)  安装MongoDB  云MongoDB 阿里云、腾讯云(收费) MongoDB官方的MongoDB Atlas(免费+收费)  云MongoDB  注册用户 创建集群 添加数据库用户 设置IP地址白名单 获取连接地址  用Mongoose 连接MongoDB  安装Mongoose
npm i mongoose --save  用Mongoose连接MongoDB
const {connectionStr} = require(&#39;./config&#39;); const mongoose = require(&#39;mongoose&#39;); mongoose.</description>
    </item>
    
    <item>
      <title>10、错误处理</title>
      <link>https://jxlnssyly.github.io/10%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Sat, 16 Nov 2019 13:54:43 +0800</pubDate>
      
      <guid>https://jxlnssyly.github.io/10%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>错误处理简介 异常状况有哪些  运行时错误，都返回500 逻辑错误，如找不到(404)、先决条件失败(412)、无法处理的实体(参数格式不对,422)等  为什么要用错误处理  防止程序挂掉 告诉用户错误信息 便于开发者调试  Koa自带的错误处理  制造404、412、500  自己编写错误中间件 # 在所有的中间件之前做处理 app.use(async (ctx, next) =&amp;gt; { try { await next(); } catch (e) { ctx.status = e.status || e.statusCode || 500; ctx.body = { message: e.message } } })  使用koa-json-error进行错误处理  安装Koa-json-error
npm i koa-json-error --save  使用koa-json-error的默认配置处理错误
const error = require(&#39;koa-json-error&#39;); app.use(error());  修改配置使其在生产环境下禁用错误堆栈的返回
const error = require(&#39;koa-json-error&#39;); # 去除堆栈信息，堆栈信息里面有文件路径 app.</description>
    </item>
    
    <item>
      <title>9、控制器简介</title>
      <link>https://jxlnssyly.github.io/9%E6%8E%A7%E5%88%B6%E5%99%A8%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 16 Nov 2019 10:49:32 +0800</pubDate>
      
      <guid>https://jxlnssyly.github.io/9%E6%8E%A7%E5%88%B6%E5%99%A8%E7%AE%80%E4%BB%8B/</guid>
      <description>什么是控制器  拿到路由分配的任务,并执行 在Koa中是一个中间件  为什么要用控制器  获取HTTP请求参数 处理业务逻辑 发送HTTP响应  获取HTTP请求参数  Query String, 如?q=keyword Router Params, 如/users/:id Body, 如{name: &amp;lsquo;李雷&amp;rsquo;} Header，如Accept、Cookie  发送HTTP响应  发送Status,如200/400等 发送Body, 如{name: &amp;lsquo;李雷&amp;rsquo;} 发送Header，如Allow，Content-Type  编写控制器最佳实践  每个资源的控制器放在不同的文件里 尽量使用类+类方法的形式编写控制器 严谨的错误处理  获取HTTP请求参数  学习断点调试 获取query
ctx.query  获取router params
ctx.params  获取body
#需要安装node包koa-bodyparser npm i koa-bodyparser --save # 导入包 const parser = require(&#39;koa-bodyparser&#39;) app.use(parser()) # 获取body ctx.request.body  获取Header
ctx.header   HTTP响应  发送status</description>
    </item>
    
    <item>
      <title>8、HTTP options</title>
      <link>https://jxlnssyly.github.io/8http/</link>
      <pubDate>Sat, 16 Nov 2019 10:31:03 +0800</pubDate>
      
      <guid>https://jxlnssyly.github.io/8http/</guid>
      <description> HTTP options方法的作用是什么  检测服务器所支持的请求方法 CORS中的预检请求  allowedMethods的作用  响应options方法，告诉它所支持的请求方法 相应地返回405(不允许)和501(未实现)  RESTful API最佳实践 usersRouter.get(&#39;/&#39; , (ctx) =&amp;gt; { ctx.body = [{name: &#39;李雷&#39;}, {name: &#39;韩梅梅&#39;}]; }); usersRouter.post(&#39;/&#39; , (ctx) =&amp;gt; { ctx.body = {name: &#39;李雷&#39;}; }); usersRouter.get(&#39;/:id&#39; , (ctx) =&amp;gt; { ctx.body = {name: &#39;李雷&#39;} }); usersRouter.put(&#39;/:id&#39; , (ctx) =&amp;gt; { ctx.body = {name: &#39;李雷2&#39;} }); usersRouter.delete(&#39;/:id&#39; , (ctx) =&amp;gt; { ctx.status = 204; });  </description>
    </item>
    
    <item>
      <title>7、Koa Router实现路由</title>
      <link>https://jxlnssyly.github.io/7koa-router%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Sat, 16 Nov 2019 10:06:27 +0800</pubDate>
      
      <guid>https://jxlnssyly.github.io/7koa-router%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1/</guid>
      <description>更优雅地实现基本功能  安装Koa-Router
npm i koa-router --save  使用Koa-Router
const Koa = require(&#39;koa&#39;); const Router = require(&#39;koa-router&#39;); const app = new Koa(); const router = new Router(); router.get(&#39;/&#39;, (ctx) =&amp;gt; { ctx.body = &#39;这是主页&#39;; }); router.get(&#39;/users&#39;, (ctx) =&amp;gt; { ctx.body = &#39;这是用户列表&#39;; }); router.post(&#39;/users&#39;, (ctx) =&amp;gt; { ctx.body = &#39;这是创建用户&#39;; }); router.get(&#39;/users/:id&#39;, (ctx) =&amp;gt; { ctx.body = `这是用户 ${ctx.params.id}` }) app.use(router.routes()); app.listen(3000);   路由前缀，多中间用法 const Koa = require(&#39;koa&#39;); const Router = require(&#39;koa-router&#39;); const app = new Koa(); const router = new Router(); const usersRouter = new Router({prefix: &#39;/users&#39;}); const auth = async (ctx, next) =&amp;gt; { if (ctx.</description>
    </item>
    
    <item>
      <title>6、Koa路由初识</title>
      <link>https://jxlnssyly.github.io/6koa%E8%B7%AF%E7%94%B1%E5%88%9D%E8%AF%86/</link>
      <pubDate>Sat, 16 Nov 2019 09:43:51 +0800</pubDate>
      
      <guid>https://jxlnssyly.github.io/6koa%E8%B7%AF%E7%94%B1%E5%88%9D%E8%AF%86/</guid>
      <description>路由是什么？  决定了不同URL是如何被不同地执行的 在Koa中，路由本质是一个中间件  为什么要用路由?  如果没有路由，会怎么样？
1、没有路由，所有的请求都做了相同的事 2、没有路由，所有的请求都会返回相同的结果   路由存在的意义? 1、处理不同的URL 2、处理不同的HTTP方法 3、解析URL上的参数  自己编写路由中间件  处理不同的URL
app.use(async (ctx) =&amp;gt; { if (ctx.url === &#39;/&#39;) { ctx.body = &#39;这是主页&#39;; } else if (ctx.url === &#39;/users&#39;) { ctx.body = &#39;这是用户列表页&#39;; } else { ctx.status = 404; } });  处理不同的HTTP方法
app.use(async (ctx) =&amp;gt; { if (ctx.url === &#39;/&#39;) { ctx.body = &#39;这是主页&#39;; } else if (ctx.url === &#39;/users&#39;) { if (ctx.</description>
    </item>
    
    <item>
      <title>5、koa中间件和洋葱模型</title>
      <link>https://jxlnssyly.github.io/5koa%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%92%8C%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 16 Nov 2019 09:19:52 +0800</pubDate>
      
      <guid>https://jxlnssyly.github.io/5koa%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%92%8C%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B/</guid>
      <description>学习async await # 要使用await必须在async的函数里面 (async () =&amp;gt; { const rest = await fetch(&#39;//api.github.com/users&#39;); const json = await rest.json(); console.log(json) const rest2 = await fetch(&#39;//api.github.com/users/lewis617&#39;); const json2 = await rest2.json(); console.log(json2) })()  编写Koa中间件 const Koa = require(&#39;koa&#39;); const app = new Koa(); # 中间件1 next表示中间件2 app.use(async (ctx, next) =&amp;gt; { await next(); # 执行中间件2 ctx.body = &#39;Hello zhihu&#39;; }); # 中间件2 app.use(async (ctx) =&amp;gt; { console.log(&#39;2&#39;) }) app.listen(3000);  学习洋葱模型 const Koa = require(&#39;koa&#39;); const app = new Koa(); const PORT = 3000; // #1 app.</description>
    </item>
    
    <item>
      <title>4、koa入门</title>
      <link>https://jxlnssyly.github.io/4koa/</link>
      <pubDate>Sat, 16 Nov 2019 08:52:37 +0800</pubDate>
      
      <guid>https://jxlnssyly.github.io/4koa/</guid>
      <description>Koa简介  基于Node.js的下一代Web框架  基于Node.js: Node.js模块 下一代: 蚕食第一代Web框架Express的市场 Web框架: 不是命令行工具、不是算法  由Express幕后的原班人马打造 Web应用和API开发领域 更小、更富有表现力、更健壮 利用async函数、丢弃回调函数 增强错误处理: try catch 没有捆绑任何中间件 快速而愉快地编写程序  第一个Koa程序  初始化项目
# 创建项目文件夹 mkdir zhihu-api # 进入项目文件夹 cd zhihu-api # 初始化npm npm init  安装Koa
# npm安装Koa npm i koa --save  编写hello world
# 引入koa const Koa = require(&#39;koa&#39;); # 实例化koa const app = new Koa(); # 设置响应 app.use( () =&amp;gt; { ctx.body = &amp;quot;hello world&amp;quot; }); # 设置监听端口 app.</description>
    </item>
    
    <item>
      <title>3、什么是RESTful</title>
      <link>https://jxlnssyly.github.io/3%E4%BB%80%E4%B9%88%E6%98%AFrestful/</link>
      <pubDate>Fri, 15 Nov 2019 22:18:58 +0800</pubDate>
      
      <guid>https://jxlnssyly.github.io/3%E4%BB%80%E4%B9%88%E6%98%AFrestful/</guid>
      <description> RESTful API 具体什么样子  基本的URI 标准HTTP方法,如GET、POST、PUT、PATCH、DELETE 传输的数据媒体类型，如JSON、XML  现实举例  GET /users # 获取user列表 GET /users/12 # 查看某个具体的user POST /users #代表新建一个用户 PUT /users/12 # 更新user 12 DELETE /users/12 # 删除user 12  请求设计规范  URI使用名词、尽量使用复数，如/users URI使用嵌套表示关联关系，如/users/12/repos/5 使用正确的HTTP方法，如GET/POST/PUT/DELETE 不符合CRUD的情况: POST/action/子资源  响应设计规范  查询 分页 字段过滤 状态码 错误处理  安全  HTTPS 鉴权 限流  开发者友好  文档 超媒体  </description>
    </item>
    
    <item>
      <title>2、统一接口的限制</title>
      <link>https://jxlnssyly.github.io/2.%E7%BB%9F%E4%B8%80%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%99%90%E5%88%B6/</link>
      <pubDate>Fri, 15 Nov 2019 22:07:45 +0800</pubDate>
      
      <guid>https://jxlnssyly.github.io/2.%E7%BB%9F%E4%B8%80%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%99%90%E5%88%B6/</guid>
      <description> 资源的标识  资源是任何可以命名的事物、比如用户、评论等 每个资源可以通过URI被唯一地标识  通过表述来操作资源  表述就是Representation,比如JSON、XML等 客户端不能直接操作(比如SQL)服务端资源 客户端只能通过表述(比如JSON)来操作资源  自描述消息  每个消息(请求或响应)必须提供足够的信息让接受者理解 媒体类型(application/json、application/xml) HTTP方法:GET(查)、POST(增)、DELETE(删) 是否缓存：Cache-Control  超媒体作为应用状态引擎  超媒体: 带文字的链接 应用状态: 一个网页 引擎: 驱动、跳转 合起来：点击链接跳转到另一个网页  </description>
    </item>
    
    <item>
      <title>1、初步认识REST</title>
      <link>https://jxlnssyly.github.io/1.%E8%AE%A4%E8%AF%86restapi/</link>
      <pubDate>Thu, 14 Nov 2019 21:57:52 +0800</pubDate>
      
      <guid>https://jxlnssyly.github.io/1.%E8%AE%A4%E8%AF%86restapi/</guid>
      <description> REST是什么?  REST是一种架构风格，万维网软件架构风格 用来创建网络服务的  为什么叫 REST?  Representational State Transfer Representational:数据的表现形式 State: 当前状态或者数据 Transfer: 数据传输  REST的6个限制 1、客户端-服务器(Client - Server)
* 关注点分离 * 服务端专注数据存储，提升了简单性 * 前端专注用户界面，提升了可移植性  2、无状态(Stateless)
* 所有用户会话信息都保存在客户端 * 每次请求必须包括所有信息，不能依赖上下文信息 * 服务端不用保存会话信息，提升了简单性、可靠性、可见性  3、缓存
* 所有服务端响应都要标为可缓存或不可缓存 * 减少前后端交互，提升了性能  4、统一接口(Uniform Interface)
* 接口设计尽可能统一通用，提升了简单性，可见性 * 接口与实现解耦，使前后端可以独立开发迭代  5、分层系统(Layered System)
* 每层只知道相邻的一层，后面隐藏的就不知道了 * 客户端不知道是和代理还是真实服务器通信 * 其它层: 安全层、负载均衡、缓存层等  6、按需代码(Code-On-Demand可选)
* 客户端可以下载运行服务端传来的代码(比如JS) * 通过减少一些功能，简化了客户端  </description>
    </item>
    
  </channel>
</rss>